Q:
Convert Sorted Array to Binary Search Tree
https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

Explanation:
- The solution converts 
    a sorted array 
    into 
    a height-balanced BST.
- It finds the middle element of the array to use as the root, 
    then recursively constructs 
        the left 
            and 
        right subtrees 
            using 
                the left 
                    and 
                right halves of the array.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        if not nums:
            return None 
        mid = len(nums) // 2
        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid]) #nums[0 .. mid-1]
        root.right = self.sortedArrayToBST(nums[mid+1:]) #nums[mid+1 .. end of element]
        return root                