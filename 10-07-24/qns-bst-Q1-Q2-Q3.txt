Some of below problems and solutions cover 
    fundamental operations on BSTs: 
        searching, 
        inserting, 
        constructing BSTs. 

Q: 
Search in a Binary Search Tree
https://leetcode.com/problems/search-in-a-binary-search-tree/

**Explanation:**
- The solution uses the property of BSTs 
    where the left subtree contains values less than the root, 
    and the right subtree contains values greater than the root.
- If the current node is `None` or its value matches the search value, 
    return the current node.
- Recursively 
    search 
        in the left subtree 
            if the search value is less than the current node's value, 
        or 
        in the right subtree 
            if it is greater.

class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        #base cond 
        if root is None:
            return None 
        #logic 
        if root.val == val:
            return root
        elif val > root.val:
            return self.searchBST(root.right, val)
        else: #key<root.value 
            return self.searchBST(root.left, val)                  

Q: 
Insert into a Binary Search Tree
https://leetcode.com/problems/insert-into-a-binary-search-tree/

**Explanation:**
    - The solution inserts a new value into 
        the BST while maintaining its properties.
    - If the current node is `None`, 
        create a new node with the value.
    - Recursively insert 
        into the left subtree 
            if the value is less than the current node's value, 
        or 
        into the right subtree 
            if it is greater.

class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        #base cond 
        if root is None:
            return TreeNode(val)
        
        #logic 
        if  val > root.val:
            root.right = self.insertIntoBST(root.right, val)
        else: #val < root.val 
            root.left = self.insertIntoBST(root.left, val)
        return root

Q: 
Minimum Distance Between BST Nodes
https://leetcode.com/problems/minimum-distance-between-bst-nodes/

**Explanation:**
    - The solution finds 
        the minimum distance between any two nodes in a BST.
    - It uses an inorder traversal 
        to collect the values in a sorted list, 
        then calculates the minimum difference 
        between consecutive values.
    
def inorder(root, ar = []):
    if not root:
        return ar 
    #logic 
    inorder(root.left, ar)
    ar.append(root.val)
    inorder(root.right, ar)
class Solution:
    def minDiffInBST(self, root: Optional[TreeNode]) -> int:
        ar = []
        inorder(root, ar) #ar will have sorted data 
        diff = []
        N = len(ar)
        for I in range(N-1): #one element bef last
            diff.append(abs(ar[I]-ar[I+1]))
        minimum = min(diff)
        return minimum