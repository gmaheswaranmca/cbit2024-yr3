Q: **Symmetric Tree (LeetCode 101)**
https://leetcode.com/problems/symmetric-tree/description/


    Check 
    if a given binary tree is symmetric around its center. 
    This means 
        the left subtree should be 
        a mirror image of the right subtree.

### Problem Explanation:
A tree is symmetric if:
- The root node has two subtrees that are mirrors of each other.
- Each subtree's left child mirrors the other subtree's right child.

### Solution Approach:
To determine if the tree is symmetric, 
we need to compare the left and right subtrees recursively. 
We'll use a helper function that checks 
if two trees are mirrors of each other.
def is_two_symmetric(p, q):
    #base conditions 
    if (not p) and (not q):
        return True 
    if (not p) or (not q):
        return False 
    #logic for not same     
    if p.val != q.val:
        return False 
    #recursively we find the trees are symmetric or not 
    return is_two_symmetric(p.left,q.right) and is_two_symmetric(p.right,q.left)
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if not root:
            return True 
        return is_two_symmetric(root.left, root.right)

