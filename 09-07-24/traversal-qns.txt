
1. Inorder Traversal
**Problem:** [Binary Tree Inorder Traversal]
(https://leetcode.com/problems/binary-tree-inorder-traversal/)
(https://www.hackerrank.com/challenges/tree-inorder-traversal/problem)

2. Preorder Traversal
**Problem:** [Binary Tree Preorder Traversal]
(https://leetcode.com/problems/binary-tree-preorder-traversal/)
(https://www.hackerrank.com/challenges/tree-preorder-traversal/problem)

def preOrder(root):
    #Write your code here
    if (root is None):
        return
    print(root.info, end=' ')
    preOrder(root.left)
    preOrder(root.right)

3. Postorder Traversal
**Problem:** [Binary Tree Postorder Traversal]
(https://leetcode.com/problems/binary-tree-postorder-traversal/)
(https://www.hackerrank.com/challenges/tree-postorder-traversal/problem)
def postOrder(root):
    #Write your code here
    if not root:
        return
    postOrder(root.left)
    postOrder(root.right)
    print(root.info, end=' ')

4. Level Order Traversal
**Problem:** [Binary Tree Level Order Traversal]
(https://leetcode.com/problems/binary-tree-level-order-traversal/)
(https://www.codechef.com/problems/BINTREE)

from collections import deque
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None:
            return []
        queue = deque([[root]])
        res = []
        while queue:
            nodes = queue.popleft()
            
            nodes_val = []
            for node in nodes:
                nodes_val.append(node.val)
                children = []
                if node.left:
                    children.append(node.left)
                if node.right:
                    children.append(node.right)
                queue.append(children)
            if(len(nodes_val) > 0):    
                res.append(nodes_val)

        return res
            

Find depth value which the sub list index where we append the queue popped value.
