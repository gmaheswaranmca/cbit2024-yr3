Tree notes:
    - A tree is a hierarchical data structure consisting of nodes, 
        with a single node designated as the root. 
    - Trees are widely used in computer science 
        for representing hierarchical data, organizing information 
        for efficient retrieval, and more.
    Examples for the tree: 
        1. system folder of our computer system 
        2. DOM elements tree of the web page / HTML Page 

This notes provides 
    - an overview of tree data structures, 
    - common types of trees, and 
    - basic operations and traversals. 

### Basic Terminology
This basic tree structure and terminology will help you understand and 
work with various tree-related problems and concepts in computer science.

1. **Node**: The fundamental part of a tree. Each node contains a value or data.
2. **Root**: The top node of a tree. It has no parent.
3. **Edge**: The connection between two nodes.
4. **Parent**: A node that has one or more child nodes.
5. **Child**: A node that has a parent node.
6. **Leaf**: A node with no children.
7. **Subtree**: A tree consisting of a node and its descendants.
8. **Height of a Node**: The number of edges on the longest path 
    from the node to a leaf.
9. **Depth of a Node**: The number of edges from the root to the node.
10. **Height of a Tree**: The height of the root node.
11. **Degree of a Node**: The number of children of a node.

Here's a basic explanation of tree terminology 
with an example diagram of a binary tree:

### Example Diagram:
```
        1
       / \
      2   3
     / \   \
    4   5   6
```

### Terminology:

1. **Root:** The top node of the tree. In the example, node `1` is the root.

2. **Node:** Each element in the tree. Nodes `1`, `2`, `3`, `4`, `5`, and `6` are all nodes in the tree.

3. **Edge:** The connection between two nodes. For instance, there is an edge between node `1` and node `2`.

4. **Parent:** A node that has one or more children. In the example, node `1` is the parent of nodes `2` and `3`.

5. **Child:** A node that has a parent. In the example, nodes `2` and `3` are children of node `1`.

6. **Leaf:** A node that does not have any children. In the example, nodes `4`, `5`, and `6` are leaf nodes.

7. **Subtree:** Any node and all its descendants. For instance, the subtree rooted at node `2` consists of nodes `2`, `4`, and `5`.

8. **Depth:** The number of edges from the root to a node. The root node has a depth of `0`. Node `2` and node `3` have a depth of `1`.

9. **Height:** The number of edges on the longest path from a node to a leaf. The height of the tree is the height of the root. In the example, the height of the tree is `2` (from node `1` to node `4`/`5`/`6`).

10. **Sibling:** Nodes that share the same parent. In the example, nodes `2` and `3` are siblings.

11. **Binary Tree:** A tree where each node has at most two children. The example provided is a binary tree.

### Tree Example Explained:
- **Root:** Node `1` is the root.
- **Nodes:** `1`, `2`, `3`, `4`, `5`, `6`.
- **Edges:** `(1-2)`, `(1-3)`, `(2-4)`, `(2-5)`, `(3-6)`.
- **Parent-Child Relationship:**
  - Node `1` is the parent of nodes `2` and `3`.
  - Node `2` is the parent of nodes `4` and `5`.
  - Node `3` is the parent of node `6`.
- **Leaf Nodes:** Nodes `4`, `5`, and `6` are leaves as they have no children.
- **Subtrees:**
  - Subtree rooted at `2`: Nodes `2`, `4`, `5`.
  - Subtree rooted at `3`: Nodes `3`, `6`.
- **Depth:**
  - Node `1` has depth `0`.
  - Nodes `2` and `3` have depth `1`.
  - Nodes `4`, `5`, and `6` have depth `2`.
- **Height:**
  - The height of the entire tree is `2`.
  - The height of node `2` and `3` is `1`.
  - The height of nodes `4`, `5`, and `6` is `0`.
- **Degree:**
    Node 1: Has two children (2 and 3), so its degree is 2.
    Node 2: Has two children (4 and 5), so its degree is 2.
    Node 3: Has one child (6), so its degree is 1.
    Node 4: Has no children, so its degree is 0.
    Node 5: Has no children, so its degree is 0.
    Node 6: Has no children, so its degree is 0.

 


### Types of Trees
1. **Binary Tree**: 
    A tree in which each node has at most two children, 
    usually referred to as the left child and the right child.
2. **Binary Search Tree (BST)**: 
    A binary tree where for each node, 
    all elements in the left subtree are less than the node, 
    and all elements in the right subtree are greater than the node.
3. **AVL Tree**: 
    A self-balancing binary search tree 
    where the height of the left and right subtrees of any node 
    differ by at most one.
4. **Red-Black Tree**: 
    A self-balancing binary search tree 
    with additional properties to ensure balance, 
    such as nodes being colored red or black.
5. **B-Tree**: A self-balancing tree data structure 
    that maintains sorted data and allows searches, 
    sequential access, insertions, and 
    deletions in logarithmic time.
6. **Trie (Prefix Tree)**: 
    A tree used to store a dynamic set of strings, 
    where each node represents a single character of a string.

### Basic Operations on Trees
#### Binary Tree Operations:
1. **Insertion**: Adding a node to the tree.
2. **Deletion**: Removing a node from the tree.
3. **Traversal**: Visiting all the nodes in a tree in a specific order.

DFS 
Pre order   : 1 2 4 5 3 6
            visit | left | right 
In order    : 4 2 5 1 3 6
            left | visit | right 
Post Order  : 4 5 2 6 3 1
            left | right | visit 

BFS 
Level Order 1 2 3 4 5 6



### Binary Tree Node Definition:
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
```

### Binary Tree Traversal Methods
1. **In-order Traversal**:
   - Traversal of the left subtree.
   - Visit the root node.
   - Traversal of the right subtree.
   - **Usage**: In binary search trees, 
        it retrieves elements in sorted order.
   
   ```python
   def in_order_traversal(root):
       if root:
           in_order_traversal(root.left)
           print(root.value)
           in_order_traversal(root.right)
   ```

2. **Pre-order Traversal**:
   - Visit the root node.
   - Visit the left subtree.
   - Visit the right subtree.
   - **Usage**: Used to create a copy of the tree.

   ```python
   def pre_order_traversal(root):
       if root:
           print(root.value)
           pre_order_traversal(root.left)
           pre_order_traversal(root.right)
   ```

3. **Post-order Traversal**:
   - Visit the left subtree.
   - Visit the right subtree.
   - Visit the root node.
   - **Usage**: Used to delete or free nodes.

   ```python
   def post_order_traversal(root):
       if root:
           post_order_traversal(root.left)
           post_order_traversal(root.right)
           print(root.value)
   ```

4. **Level-order Traversal (Breadth-First Search)**:
   - Visit nodes level by level from the root.
   - **Usage**: Used in breadth-first search.

   ```python
   from collections import deque

   def level_order_traversal(root):
       if root is None:
           return
       queue = deque([root]) 
       while queue:
           node = queue.popleft() 
           print(node.value)        
           if node.left:
               queue.append(node.left)
           if node.right:
               queue.append(node.right)
   ```
