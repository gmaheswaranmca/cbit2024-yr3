Q **Binary Tree Maximum Path Sum** - [LeetCode 124]
https://leetcode.com/problems/binary-tree-maximum-path-sum/

problem: 
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes 
in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. 
Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

Steps
    Define the Recursive Function:
        This function should take a node as input and 
        return the maximum path sum that starts from the node and 
        extends to either its left or right child.
    Base Case:
        If the node is None, return 0 because an empty subtree 
        contributes nothing to the path sum.
    Recursive Case:
        Recursively calculate the maximum path sum for the left and right subtrees.
        Compute the maximum path sum that passes through the current node and 
        includes the left and right children.
        Update the global maximum path sum if the current path sum is greater than 
        the previously recorded maximum.
    Return Value:
        Return the maximum path sum that includes the current node and 
        extends to one of its subtrees.

max_path_sum = float('-inf')
#return path sum of the node
#update the max_path_sum once it is found
def find_path_sum(node): #read/write
    global max_path_sum
    if not node:
        return 0
    left_max = max(find_path_sum(node.left),0)
    right_max = max(find_path_sum(node.right),0)
    node_max_path_sum = left_max + right_max + node.val
    #check max_path_sum with node_max_path_sum
    if node_max_path_sum > max_path_sum:
        max_path_sum = node_max_path_sum
    #node + (max of one of sub tree)
    return node.val + max(left_max, right_max)
class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        global max_path_sum
        find_path_sum(root)
        return max_path_sum


Q **Construct Binary Tree from Preorder and Inorder Traversal** - [LeetCode 105]
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
Given two integer arrays preorder and inorder where preorder is 
the preorder traversal of a binary tree and inorder is 
the inorder traversal of the same tree, 
construct and return the binary tree.

Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]

Constraints:
   1 <= preorder.length <= 3000
   inorder.length == preorder.length
   -3000 <= preorder[i], inorder[i] <= 3000
   preorder and inorder consist of unique values.
   Each value of inorder also appears in preorder.
   preorder is guaranteed to be the preorder traversal of the tree.
   inorder is guaranteed to be the inorder traversal of the tree.

### Approach to Solve

1. **Understanding the Relationship**:
   - In preorder traversal, 
        the first element is always the root of the subtree.
   - In inorder traversal, 
        elements to the left of the root belong to the left subtree, 
        and elements to the right belong to the right subtree.

2. **Recursive Construction**:
   - Use a recursive approach where:
     - The current subtree's root is the first element of the preorder array.
     - Find this root in the inorder array to determine the left and right subtrees.
     - Recursively construct the left and right subtrees.

3. **Steps**:
   - Start with the preorder and inorder arrays.
   - Extract the root from the preorder array.
   - Find the index of this root in the inorder array to split it into left and right subtrees.
   - Recursively construct the left and right subtrees using the respective parts of the preorder and inorder arrays.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        #base logic and validation
        if (not preorder) or (not inorder) or (len(preorder) != len(inorder)):
            return None
        #form the root for given preorder and inorder
        val = preorder[0]
        root = TreeNode(val)
        #find the index of the root inorder list 
        inorder_index = inorder.index(val)
        #get the left and right tree's inorder and preoder traversal lists
        left_preorder,right_preorder = preorder[1:inorder_index+1], preorder[inorder_index+1:]
        left_inorder,right_inorder = inorder[:inorder_index], inorder[inorder_index+1:]
        #build the left and right sub trees of the node using their inorder and preorder traversal list
        root.left = self.buildTree(left_preorder, left_inorder)
        root.right = self.buildTree(right_preorder, right_inorder)
        return root



Assignment:
Q **Lowest Common Ancestor of a Binary Tree** - [LeetCode 236]
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: 
   “The lowest common ancestor is defined between two nodes p and q 
   as the lowest node in T that has both p and q as descendants 
   (where we allow a node to be a descendant of itself).”

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.


### Approach to Solve
1. **Recursive DFS Approach**:
   - Perform a Depth-First Search (DFS) starting from the root of the tree.
   - If the current node is `None` or matches either `p` or `q`, return the current node.
   - Recursively search the left and right subtrees.
   - If both `p` and `q` are found in separate subtrees (`left` and `right`), then the current node is the LCA.
   - If only one of `p` or `q` is found, return that node as a potential LCA for its subtree.
   - If neither `p` nor `q` is found in either subtree, return `None`.

2. **Base Case**:
   - If the current node is `None`, return `None`.
   - If the current node matches `p` or `q`, return the current node.

3. **Recursive Case**:
   - Recursively search the left subtree and store the result in `left`.
   - Recursively search the right subtree and store the result in `right`.

4. **Return Value**:
   - If both `left` and `right` are not `None`, it means `p` and `q` are found in different subtrees, so return the current node.
   - If only one of `left` or `right` is `None`, return the non-`None` value (potential LCA found in one subtree).
   - If both `left` and `right` are `None`, return `None`.

Lab Assignment:
Q
**Kth Smallest Element in a BST** - [LeetCode 230]
https://leetcode.com/problems/kth-smallest-element-in-a-bst/
Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.



Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104

Approach:
    inorder ie recursion 
-----Solution 1
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

def inorder(root,ar=[]):
    if not root:
        return
    inorder(root.left,ar)
    ar.append(root.val)
    inorder(root.right,ar) 
    

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        ar = []
        inorder(root,ar) #ar is the sorted elements in the bst 
        #k is 1 based index 
        return ar[k-1]

------------------Solution 2 [optimized version Solution 1] !!!!Mistakes are there
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
k_th_small = float('-inf')
index = 0
def inorder(root,k):
    global k_th_small
    global index
    if not root:
        return
    inorder(root.left,k)
    index += 1
    if index == k:
        k_th_small = root.val 
        return
    inorder(root.right,k) 
    

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        inorder(root,k)  
        return k_th_small



Lab Assignment:
Q
**Range Sum of BST** - [LeetCode 938]
https://leetcode.com/problems/range-sum-of-bst/
Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.
Example 2:


Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.
**Recursive DFS Approach**:
   - Perform a Depth-First Search (DFS) starting from the root of the tree.
   - Use the BST property to decide whether to explore left or right subtrees or to add the current node's value to the sum.
   - Traverse each node and add its value to the sum if it lies within the range `[L, R]`.