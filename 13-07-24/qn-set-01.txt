------------------- Questions on searching and sorting: ------------------- 
### Q [Find Peak Element](https://leetcode.com/problems/find-peak-element/)
**Problem Statement:**
A peak element is an element that is strictly greater than its neighbors. 
Given a 0-indexed integer array `nums`, find a peak element, and return its index. 
If the array contains multiple peaks, return the index to any of the peaks.

**Solution Approach:**
- **Binary Search:** 
Use binary search to find a peak element by comparing the middle element to its neighbors. 
This approach has a time complexity of O(log n).

### Q [Search a 2D Matrix](https://leetcode.com/problems/search-a-2d-matrix/)
**Problem Statement:**
Write an efficient algorithm that searches for a value in an `m x n` matrix. 
This matrix has the following properties:
  - Integers in each row are sorted from left to right.
  - The first integer of each row is greater than the last integer of the previous row.

**Solution Approach:**
- **Binary Search:** 
Treat the matrix as a flat sorted array and use binary search. 
Convert the 1D index to 2D indices during the search. 
This approach has a time complexity of O(log(m*n)).

### Q [Sort Colors]
(https://leetcode.com/problems/sort-colors/)
**Problem Statement:**
Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place 
so that objects of the same color are adjacent, 
with the colors in the order red, white, and blue. 
We use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

**Solution Approach:**
- **One-pass Dutch National Flag algorithm:** 
Use three pointers to sort the array in a single pass. 
This approach has a time complexity of O(n).

------------------- Questions on searching graph: ------------------- 
### Q [Kth Largest Element in an Array]
(https://leetcode.com/problems/kth-largest-element-in-an-array/)
**Problem Statement:**
Given an integer array `nums` and an integer `k`, 
return the `k`th largest element in the array.

**Solution Approach:**
- **Quickselect Algorithm:** 
Use the quickselect algorithm, 
which is similar to quicksort but only partially sorts the array 
to find the kth largest element. 
This approach has an average time complexity of O(n).

Breadth-First Search (BFS) Problems:
    Number of Islands: 
        This problem involves counting the number of distinct islands in a 2D grid map. 
        We can solve it using BFS. 
        Problem Link
        https://leetcode.com/problems/number-of-islands/
    Word Ladder: 
        Find the length of the shortest transformation sequence 
        from a start word to an end word, using BFS. 
        Problem Link
        https://leetcode.com/problems/word-ladder/

Depth-First Search (DFS) Problems:
    Number of Islands: 
        Count the number of islands in a 2D grid map, utilizing DFS. 
        Problem Link
        https://leetcode.com/problems/number-of-islands/
    Word Search: 
        Determine if a word exists in a 2D board, using DFS. 
        Problem Link
        https://leetcode.com/problems/word-search/